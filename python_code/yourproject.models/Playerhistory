from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Float, BigInteger
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

Base = declarative_base()

columns_dict = {
    "Id": Column(Integer, primary_key=True),
    "player_id": Column(Integer, ForeignKey=True),
    "team_id": Column(Integer, ForeignKey=True),
    "startdate": Column(DateTime, default=datetime.utcnow),
    "enddate": Column(DateTime, default=datetime.utcnow),
    "timestamp": Column(DateTime, default=datetime.utcnow),
    "transfervalue": Column(Float),
    "last_updated": Column(DateTime),
    "create": Column(DateTime, default=datetime.utcnow),
    "update": Column(DateTime, default=datetime.utcnow),
}

class PlayerHistory(Base):
    '''
    This class represents the player history record in the database.

    Attributes:
        id (int): The primary key of the player history record.
        player_id (int): The unique player ID from the player data.
        team_id (int): The team ID that the player was part of.
        startdate (datetime): The starting date of the player's history record.
        enddate (datetime): The ending date of the player's history record.
        transfervalue (float): The value of the player transfer (if applicable).
        timestamp (datetime): The timestamp when the record was created.
        last_updated (datetime): The timestamp of the last update for the player history record.
        create (datetime): The date and time the player history record was created.
        update (datetime): The date and time the player history record was last updated.

    Methods:
        __repr__: Returns a string representation of the player history record.
    '''
    
    __tablename__ = "Playerhistory"

    id = Column(Integer, primary_key=True)
    player_id = Column(Integer, ForeignKey("players.id"))
    team_id = Column(Integer, ForeignKey("teams.id"))
    startdate = Column(DateTime, default=datetime.utcnow)
    enddate = Column(DateTime, default=datetime.utcnow)
    transfervalue = Column(Float)  # Store transfer value as a float
    timestamp = Column(DateTime, default=datetime.utcnow)
    last_updated = Column(DateTime)
    create = Column(DateTime, default=datetime.utcnow)
    update = Column(DateTime, default=datetime.utcnow)

    # Relationships
    player = relationship("Player")
    team = relationship("Team")
    
    def __repr__(self):
        return f"PlayerHistory(id={self.id!r}, player_id={self.player_id!r}, team_id={self.team_id!r})"
