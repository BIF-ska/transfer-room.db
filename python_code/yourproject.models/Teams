from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Float, BigInteger
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

Base = declarative_base()

columns_dict = {
    "Team_id": Column(Integer, primarykey=True),
    "Teamname": Column(String(100)),
    "Competetition_ID": Column(Integer, ForeignKey=True),
    "Country_ID": Column(Integer, ForeignKey=True),
    }

class Teams(Base):
    '''
    This class represents the player history record in the database.

    Attributes:
        Team_id (int): The unique player ID from the player data.
        Teamname (int): The Teamname for the player who is part of.
        Competetition_ID (int): The Competetition_ID for the player who is part of.
        Country_ID (int): The Country_ID for the player who is part of.

    Methods:
        __repr__: Returns a string representation of the player agencies.
    '''

    __tablename__ = "teams"
    Team_id = Column(Integer, primarykey=True)
    Teamname = Column(String(100))
    Competetition_ID = Column(Integer, ForeignKey("competetion.id"))
    Country_ID = Column(Integer, ForeignKey("country.id"))

    # Relationships
    player = relationship("Player")
    team = relationship("Team")

    def __repr__(self):
        return f"Teams(Team_id={self.Team_id!r}, Teamname={self.Teamname!r}, Competetition_ID={self.Competetition_ID!r}, Country_ID={self.Country_ID!r})"